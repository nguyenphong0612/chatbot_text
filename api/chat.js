const OpenAI = require('openai');
const db = require('../lib/database');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Function ƒë·ªÉ ki·ªÉm tra th√¥ng tin kh√°ch h√†ng c√≤n thi·∫øu
function checkMissingCustomerInfo(conversationHistory) {
  const requiredInfo = ['name', 'email', 'phone', 'company'];
  const missingInfo = [];
  
  // T·∫°o text t·ª´ conversation history ƒë·ªÉ ph√¢n t√≠ch
  const conversationText = conversationHistory
    .map(msg => msg.content)
    .join(' ')
    .toLowerCase();
  
  // Ki·ªÉm tra email (t√¨m pattern email ho·∫∑c t·ª´ kh√≥a)
  const emailPattern = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/;
  if (!emailPattern.test(conversationText) && 
      !conversationText.includes('email') && 
      !conversationText.includes('gmail') && 
      !conversationText.includes('yahoo') && 
      !conversationText.includes('hotmail')) {
    missingInfo.push('email');
  }
  
  // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i (t√¨m pattern s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam)
  const phonePattern = /(0|\+84)[3|5|7|8|9][0-9]{8}/;
  if (!phonePattern.test(conversationText) && 
      !conversationText.includes('s·ªë ƒëi·ªán tho·∫°i') && 
      !conversationText.includes('sdt') && 
      !conversationText.includes('phone')) {
    missingInfo.push('phone');
  }
  
  // Ki·ªÉm tra t√™n (t√¨m c√°c t·ª´ c√≥ th·ªÉ l√† t√™n)
  const namePattern = /(t√¥i l√†|t√™n t√¥i|g·ªçi t√¥i|t√™n c·ªßa t√¥i|t√¥i t√™n)\s+([a-zA-Z√Ä-·ªπ\s]+)/;
  if (!namePattern.test(conversationText) && 
      !conversationText.includes('t√™n') && 
      !conversationText.includes('g·ªçi')) {
    missingInfo.push('name');
  }
  
  // Ki·ªÉm tra c√¥ng ty/ng√†nh ngh·ªÅ
  if (!conversationText.includes('c√¥ng ty') && 
      !conversationText.includes('ng√†nh') && 
      !conversationText.includes('l√†m vi·ªác') && 
      !conversationText.includes('c√¥ng vi·ªác') && 
      !conversationText.includes('vƒÉn ph√≤ng') && 
      !conversationText.includes('doanh nghi·ªáp')) {
    missingInfo.push('company');
  }
  
  return missingInfo;
}

// Function ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin user t·ª´ conversation
function extractUserInfoFromConversation(conversationHistory) {
  const conversationText = conversationHistory
    .map(msg => msg.content)
    .join(' ')
    .toLowerCase();
  
  const userInfo = {};
  
  // Tr√≠ch xu·∫•t email
  const emailPattern = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/;
  const emailMatch = conversationText.match(emailPattern);
  if (emailMatch) {
    userInfo.email = emailMatch[0];
  }
  
  // Tr√≠ch xu·∫•t s·ªë ƒëi·ªán tho·∫°i
  const phonePattern = /(0|\+84)[3|5|7|8|9][0-9]{8}/;
  const phoneMatch = conversationText.match(phonePattern);
  if (phoneMatch) {
    userInfo.phone_number = phoneMatch[0];
  }
  
  // Tr√≠ch xu·∫•t t√™n (ƒë∆°n gi·∫£n)
  const namePattern = /(t√¥i l√†|t√™n t√¥i|g·ªçi t√¥i|t√™n c·ªßa t√¥i|t√¥i t√™n)\s+([a-zA-Z√Ä-·ªπ\s]{2,20})/;
  const nameMatch = conversationText.match(namePattern);
  if (nameMatch) {
    userInfo.name = nameMatch[2].trim();
  }
  
  // Tr√≠ch xu·∫•t c√¥ng ty (ƒë∆°n gi·∫£n)
  const companyPatterns = [
    /(c√¥ng ty|cty|company)\s+([a-zA-Z√Ä-·ªπ\s]{2,30})/,
    /(l√†m vi·ªác t·∫°i|l√†m t·∫°i)\s+([a-zA-Z√Ä-·ªπ\s]{2,30})/,
    /(ng√†nh|industry)\s+([a-zA-Z√Ä-·ªπ\s]{2,30})/
  ];
  
  for (const pattern of companyPatterns) {
    const match = conversationText.match(pattern);
    if (match) {
      userInfo.company = match[2].trim();
      break;
    }
  }
  
  return userInfo;
}

module.exports = async (req, res) => {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  // Only allow POST requests
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { message, conversation_id, user_info } = req.body;
    
    console.log('=== CHAT API DEBUG ===');
    console.log('Received request with conversation_id:', conversation_id);
    console.log('Message:', message);
    console.log('User info:', user_info);
    
    // Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng tr∆∞·ªõc khi th·ª±c hi·ªán c√°c thao t√°c
    console.log('Checking database table structure...');
    const tableStructureOk = await db.checkTableStructure();
    if (!tableStructureOk) {
      console.error('‚ùå Database table structure check failed');
      return res.status(500).json({ 
        error: 'Database configuration error',
        details: 'Table structure check failed'
      });
    }
    console.log('‚úÖ Database table structure check passed');
    
    if (!message) {
      return res.status(400).json({ error: 'Vui l√≤ng nh·∫≠p tin nh·∫Øn' });
    }

    // T·∫°o conversation m·ªõi n·∫øu ch∆∞a c√≥ ho·∫∑c conversation_id kh√¥ng h·ª£p l·ªá
    let currentConversationId = conversation_id;
    try {
      if (!currentConversationId) {
        // T·∫°o conversation m·ªõi khi kh√¥ng c√≥ conversation_id
        console.log('Creating new conversation...');
        const newConversation = await db.createConversation();
        currentConversationId = newConversation.conversation_id;
        console.log('‚úÖ Created new conversation with ID:', currentConversationId);
        
        // L∆∞u th√¥ng tin user n·∫øu c√≥
        if (user_info) {
          console.log('Saving user info...');
          await db.saveUserInfo(currentConversationId, user_info);
          console.log('‚úÖ User info saved');
        }
      } else {
        // Ki·ªÉm tra conversation_id c√≥ h·ª£p l·ªá kh√¥ng
        try {
          db.validateConversationId(currentConversationId);
          console.log('‚úÖ Using existing conversation ID:', currentConversationId);
        } catch (error) {
          // N·∫øu conversation_id kh√¥ng h·ª£p l·ªá, t·∫°o m·ªõi
          console.warn('‚ùå Invalid conversation ID format, creating new conversation:', currentConversationId);
          const newConversation = await db.createConversation();
          currentConversationId = newConversation.conversation_id;
          console.log('‚úÖ Created new conversation with ID:', currentConversationId);
          
          // L∆∞u th√¥ng tin user n·∫øu c√≥
          if (user_info) {
            console.log('Saving user info...');
            await db.saveUserInfo(currentConversationId, user_info);
            console.log('‚úÖ User info saved');
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Error creating/validating conversation:', error);
      throw new Error(`Database error: ${error.message}`);
    }

    // L·∫•y conversation history t·ª´ database ƒë·ªÉ context
    let conversationHistory = [];
    try {
      console.log('Loading conversation history...');
      const conversation = await db.getConversation(currentConversationId);
      if (conversation && conversation.content) {
        conversationHistory = conversation.content;
        console.log('‚úÖ Loaded conversation history, messages count:', conversationHistory.length);
      } else {
        console.log('No existing conversation history found');
      }
    } catch (error) {
      console.log('‚ùå Could not load conversation history:', error.message);
    }

    // L∆∞u user message v√†o database
    console.log('Saving user message to database...');
    try {
      await db.addMessage(currentConversationId, {
        role: 'user',
        content: message,
        timestamp: new Date().toISOString()
      });
      console.log('‚úÖ User message saved');
    } catch (error) {
      console.error('‚ùå Error saving user message:', error);
      throw new Error(`Failed to save user message: ${error.message}`);
    }

    // Chu·∫©n b·ªã messages cho OpenAI
    const messages = [
      {
        role: "system",
        content: `You are a friendly Vietnamese virtual assistant for "Sweet & Fast Delights" bakery and fast food company.

COMPANY INFO:
- Name: Sweet & Fast Delights
- Website: https://metzbakery.vn/
- Phone: 0967149228
- Address: CT7C Spark D∆∞∆°ng N·ªôi, H√† ƒê√¥ng, H√† N·ªôi
- Hours: 7AM-10PM
- Delivery: $2 within 5 miles

MENU CATEGORIES:
üç∞ Baked Goods: B√°nh ng·ªçt, b√°nh kem, b√°nh m√¨
üçî Fast Food: Burger, pizza, g√† r√°n
ü•§ Beverages: N∆∞·ªõc √©p, c√† ph√™, tr√† s·ªØa
üå± Vegan/Gluten-free: B√°nh chay, kh√¥ng gluten

CUSTOMER INFO TO COLLECT (REQUIRED):
- T√™n kh√°ch h√†ng (b·∫Øt bu·ªôc)
- Email (b·∫Øt bu·ªôc)
- S·ªë ƒëi·ªán tho·∫°i (b·∫Øt bu·ªôc)
- Ng√†nh ngh·ªÅ/C√¥ng ty (b·∫Øt bu·ªôc)
- V·ªã tr√≠ c√¥ng vi·ªác (n·∫øu c√≥)
- Th·ªùi gian r·∫£nh
- Nhu c·∫ßu/V·∫•n ƒë·ªÅ c·ª• th·ªÉ
- Ghi ch√∫ b·ªï sung

CRITICAL RULES - YOU MUST FOLLOW THESE:
1. ALWAYS respond in Vietnamese
2. ALWAYS check conversation history before responding
3. NEVER ask for information that has already been provided
4. If customer already gave their name, email, phone, company - DO NOT ask again
5. Ask ONLY ONE question at a time
6. If customer asks about menu, provide specific items and prices
7. If customer wants to order, guide them through the process
8. If customer has complaints, be empathetic and offer solutions
9. Be friendly, professional, and helpful
10. Keep responses concise but informative

CUSTOMER INFO COLLECTION STRATEGY:
- M·ª•c ti√™u: Thu th·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin kh√°ch h√†ng trong m·ªói cu·ªôc tr√≤ chuy·ªán
- Ph∆∞∆°ng ph√°p: H·ªèi m·ªôt c√°ch t·ª± nhi√™n, kh√¥ng qu√° tr·ª±c ti·∫øp
- Th·ª© t·ª± ∆∞u ti√™n: T√™n ‚Üí Email ‚Üí S·ªë ƒëi·ªán tho·∫°i ‚Üí C√¥ng ty/Ng√†nh ngh·ªÅ
- N·∫øu kh√°ch h√†ng ch∆∞a cung c·∫•p th√¥ng tin n√†o, b·∫Øt ƒë·∫ßu h·ªèi t·ª´ t√™n
- LU√îN ch·ªß ƒë·ªông h·ªèi th√¥ng tin c√≤n thi·∫øu trong qu√° tr√¨nh tr√≤ chuy·ªán
- N·∫øu kh√°ch h√†ng ch∆∞a cung c·∫•p email, s·ªë ƒëi·ªán tho·∫°i, ho·∫∑c th√¥ng tin c√¥ng ty, h√£y h·ªèi m·ªôt c√°ch l·ªãch s·ª±
- K·∫øt h·ª£p vi·ªác h·ªèi th√¥ng tin v·ªõi vi·ªác t∆∞ v·∫•n s·∫£n ph·∫©m
- TH√îNG TIN S·∫º ƒê∆Ø·ª¢C T·ª∞ ƒê·ªòNG L∆ØU V√ÄO H·ªÜ TH·ªêNG khi kh√°ch h√†ng cung c·∫•p
- ƒê·∫£m b·∫£o h·ªèi ƒë·ªß 4 th√¥ng tin: t√™n, email, s·ªë ƒëi·ªán tho·∫°i, c√¥ng ty/ng√†nh ngh·ªÅ

CONVERSATION FLOW:
1. Ch√†o h·ªèi v√† gi·ªõi thi·ªáu
2. H·ªèi nhu c·∫ßu c·ªßa kh√°ch h√†ng
3. Thu th·∫≠p th√¥ng tin c√° nh√¢n (n·∫øu ch∆∞a c√≥)
4. T∆∞ v·∫•n s·∫£n ph·∫©m/d·ªãch v·ª•
5. H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng (n·∫øu c·∫ßn)
6. K·∫øt th√∫c v√† c·∫£m ∆°n

EXAMPLE RESPONSES FOR INFO COLLECTION:
- "Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ g·ªçi b·∫°n l√† g√¨ ·∫°?" (h·ªèi t√™n)
- "ƒê·ªÉ t√¥i c√≥ th·ªÉ g·ª≠i th√¥ng tin chi ti·∫øt, b·∫°n c√≥ th·ªÉ cho t√¥i email c·ªßa b·∫°n kh√¥ng?" (h·ªèi email)
- "ƒê·ªÉ li√™n h·ªá thu·∫≠n ti·ªán, b·∫°n c√≥ th·ªÉ cho t√¥i s·ªë ƒëi·ªán tho·∫°i kh√¥ng?" (h·ªèi s·ªë ƒëi·ªán tho·∫°i)
- "B·∫°n l√†m vi·ªác ·ªü c√¥ng ty n√†o v·∫≠y? ƒê·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n ph√π h·ª£p h∆°n." (h·ªèi c√¥ng ty)
- "C·∫£m ∆°n b·∫°n [t√™n]! T√¥i ƒë√£ ghi nh·∫≠n th√¥ng tin. B√¢y gi·ªù t√¥i c√≥ th·ªÉ gi√∫p b·∫°n [y√™u c·∫ßu hi·ªán t·∫°i]"

COMBINED INFO COLLECTION EXAMPLES:
- "B√°nh su kem c·ªßa ch√∫ng t√¥i r·∫•t ph√π h·ª£p cho vƒÉn ph√≤ng. B·∫°n l√†m vi·ªác ·ªü c√¥ng ty n√†o v·∫≠y? ƒê·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n s·ªë l∆∞·ª£ng ph√π h·ª£p."
- "T√¥i s·∫Ω g·ª≠i th√¥ng tin chi ti·∫øt v·ªÅ menu qua email. B·∫°n c√≥ th·ªÉ cho t√¥i email c·ªßa b·∫°n kh√¥ng?"
- "ƒê·ªÉ ƒë·∫∑t h√†ng thu·∫≠n ti·ªán, b·∫°n c√≥ th·ªÉ cho t√¥i s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ ch√∫ng t√¥i li√™n h·ªá x√°c nh·∫≠n kh√¥ng?"
- "D·ª±a tr√™n nhu c·∫ßu c·ªßa b·∫°n, t√¥i nghƒ© combo n√†y s·∫Ω ph√π h·ª£p. B·∫°n l√†m vi·ªác ·ªü ng√†nh n√†o v·∫≠y? ƒê·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n th√™m."

EXAMPLE RESPONSES FOR CONTINUING CONVERSATION:
- "Ch√†o b·∫°n [t√™n]! T√¥i nh·ªõ b·∫°n ƒë√£ h·ªèi v·ªÅ [th√¥ng tin tr∆∞·ªõc ƒë√≥]. B√¢y gi·ªù b·∫°n c·∫ßn g√¨ th√™m?"
- "T√¥i th·∫•y b·∫°n quan t√¢m ƒë·∫øn [s·∫£n ph·∫©m]. ƒê√¢y l√† th√¥ng tin chi ti·∫øt..."
- "D·ª±a tr√™n th√¥ng tin b·∫°n ƒë√£ cung c·∫•p, t√¥i nghƒ© [s·∫£n ph·∫©m] s·∫Ω ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n."`

      }
    ];

    // Th√™m conversation history (ch·ªâ l·∫•y 10 messages g·∫ßn nh·∫•t ƒë·ªÉ tr√°nh token limit)
    const recentMessages = conversationHistory.slice(-10);
    for (const msg of recentMessages) {
      messages.push({
        role: msg.role,
        content: msg.content
      });
    }

    // Th√™m message hi·ªán t·∫°i
    messages.push({
      role: "user",
      content: message
    });

    console.log('Calling OpenAI API...');
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: messages,
      max_tokens: 800,
      temperature: 0.7,
    });

    const botResponse = completion.choices[0].message.content;
    console.log('‚úÖ Received OpenAI response');
    
    // L∆∞u bot response v√†o database
    console.log('Saving bot response to database...');
    try {
      await db.addMessage(currentConversationId, {
        role: 'assistant',
        content: botResponse,
        timestamp: new Date().toISOString()
      });
      console.log('‚úÖ Bot response saved');
    } catch (error) {
      console.error('‚ùå Error saving bot response:', error);
      throw new Error(`Failed to save bot response: ${error.message}`);
    }

    // T·ª± ƒë·ªông ph√¢n t√≠ch v√† l∆∞u th√¥ng tin kh√°ch h√†ng sau m·ªói 3 messages
    const totalMessages = conversationHistory.length + 2; // +2 v√¨ ƒë√£ th√™m user message v√† bot response
    if (totalMessages % 3 === 0) {
      try {
        console.log('Auto-analyzing conversation for customer info...');
        // G·ªçi API analyze ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin
        const analyzeResponse = await fetch(`${req.protocol}://${req.get('host')}/api/analyze`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ conversation_id: currentConversationId })
        });
        
        if (analyzeResponse.ok) {
          const analyzeData = await analyzeResponse.json();
          console.log('‚úÖ Analysis result:', analyzeData.analysis);
          
          // Log th√¥ng tin user ƒë∆∞·ª£c l∆∞u
          if (analyzeData.analysis && analyzeData.analysis.user_info) {
            const userInfo = analyzeData.analysis.user_info;
            console.log('üìù User info extracted and saved:');
            console.log('- Name:', userInfo.name || 'Not provided');
            console.log('- Email:', userInfo.email || 'Not provided');
            console.log('- Phone:', userInfo.phone_number || 'Not provided');
            console.log('- Company:', userInfo.company || 'Not provided');
            console.log('- Position:', userInfo.position || 'Not provided');
            console.log('- Lead Quality:', analyzeData.analysis.lead_quality || 'Not assessed');
          }
        } else {
          console.log('‚ùå Analysis API returned error:', analyzeResponse.status);
        }
      } catch (analyzeError) {
        console.log('‚ùå Auto-analysis failed:', analyzeError.message);
      }
    }

    // Ki·ªÉm tra v√† nh·∫Øc nh·ªü thu th·∫≠p th√¥ng tin n·∫øu ch∆∞a ƒë·∫ßy ƒë·ªß
    const missingInfo = checkMissingCustomerInfo(conversationHistory);
    if (missingInfo.length > 0 && totalMessages >= 4) {
      console.log('Missing customer info:', missingInfo);
      // Th√™m g·ª£i √Ω v√†o response n·∫øu c·∫ßn
    }

    // T·ª± ƒë·ªông l∆∞u th√¥ng tin user n·∫øu c√≥ ƒë·ªß th√¥ng tin
    if (totalMessages >= 3) {
      try {
        const extractedUserInfo = extractUserInfoFromConversation(conversationHistory);
        if (Object.keys(extractedUserInfo).length > 0) {
          console.log('üìù Extracted user info:', extractedUserInfo);
          
          // Ki·ªÉm tra xem ƒë√£ c√≥ user info ch∆∞a
          const existingUserInfo = await db.getUserInfo(currentConversationId);
          
          if (existingUserInfo) {
            // C·∫≠p nh·∫≠t th√¥ng tin hi·ªán c√≥
            const updatedUserInfo = { ...existingUserInfo, ...extractedUserInfo };
            await db.updateUserInfo(currentConversationId, updatedUserInfo);
            console.log('‚úÖ Updated existing user info');
          } else {
            // L∆∞u th√¥ng tin m·ªõi
            await db.saveUserInfo(currentConversationId, extractedUserInfo);
            console.log('‚úÖ Saved new user info');
          }
        }
      } catch (userInfoError) {
        console.log('‚ùå Error saving user info:', userInfoError.message);
      }
    }
    
    console.log('=== CHAT API COMPLETED ===');
    res.status(200).json({ 
      response: botResponse,
      conversation_id: currentConversationId,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('=== CHAT API ERROR ===');
    console.error('Error details:', error);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    
    let errorMessage = 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu';
    
    if (error.status === 401) {
      errorMessage = 'API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ki·ªÉm tra l·∫°i.';
    } else if (error.status === 429) {
      errorMessage = 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.';
    } else if (error.status === 500) {
      errorMessage = 'L·ªói server OpenAI. Vui l√≤ng th·ª≠ l·∫°i sau.';
    }
    
    res.status(500).json({ 
      error: errorMessage,
      details: error.message 
    });
  }
}; 