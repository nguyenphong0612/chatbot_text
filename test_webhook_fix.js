// Script test ƒë·ªÉ ki·ªÉm tra fix webhook
const axios = require('axios');

async function testWebhookFix() {
  console.log('üß™ Testing webhook fix...\n');

  // Test 1: Ki·ªÉm tra webhook v·ªõi conversation_id h·ª£p l·ªá
  console.log('Test 1: Webhook v·ªõi conversation_id h·ª£p l·ªá');
  try {
    const response1 = await axios.post('http://localhost:3000/api/webhook', {
      conversation_data: {
        messages: [
          { role: 'user', content: 'Test message' }
        ],
        timestamp: new Date().toISOString(),
        total_messages: 1,
        conversation_id: '550e8400-e29b-41d4-a716-446655440000' // UUID h·ª£p l·ªá
      }
    });
    
    console.log('‚úÖ Response:', response1.data);
    console.log('‚úÖ conversation_id t·ª´ webhook:', response1.data.conversation_id);
  } catch (error) {
    console.log('‚ùå Error:', error.response?.data || error.message);
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 2: Ki·ªÉm tra webhook v·ªõi conversation_id kh√¥ng h·ª£p l·ªá
  console.log('Test 2: Webhook v·ªõi conversation_id kh√¥ng h·ª£p l·ªá');
  try {
    const response2 = await axios.post('http://localhost:3000/api/webhook', {
      conversation_data: {
        messages: [
          { role: 'user', content: 'Test message' }
        ],
        timestamp: new Date().toISOString(),
        total_messages: 1,
        conversation_id: 'conv_1754374488635_seje7a331' // Format kh√¥ng h·ª£p l·ªá
      }
    });
    
    console.log('‚úÖ Response:', response2.data);
    console.log('‚úÖ conversation_id t·ª´ webhook:', response2.data.conversation_id);
    console.log('‚úÖ Expected: null (v√¨ format kh√¥ng h·ª£p l·ªá)');
  } catch (error) {
    console.log('‚ùå Error:', error.response?.data || error.message);
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 3: Ki·ªÉm tra database service v·ªõi UUID h·ª£p l·ªá
  console.log('Test 3: Database service v·ªõi UUID h·ª£p l·ªá');
  try {
    const db = require('./lib/database');
    
    // Test validateConversationId
    const validId = '550e8400-e29b-41d4-a716-446655440000';
    const result = db.validateConversationId(validId);
    console.log('‚úÖ validateConversationId:', result);
    
    // Test isValidUUID
    const isValid = db.isValidUUID(validId);
    console.log('‚úÖ isValidUUID:', isValid);
    
  } catch (error) {
    console.log('‚ùå Error:', error.message);
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 4: Ki·ªÉm tra database service v·ªõi UUID kh√¥ng h·ª£p l·ªá
  console.log('Test 4: Database service v·ªõi UUID kh√¥ng h·ª£p l·ªá');
  try {
    const db = require('./lib/database');
    
    // Test validateConversationId v·ªõi format kh√¥ng h·ª£p l·ªá
    const invalidId = 'conv_1754374488635_seje7a331';
    try {
      db.validateConversationId(invalidId);
      console.log('‚ùå Should have thrown error');
    } catch (error) {
      console.log('‚úÖ validateConversationId correctly threw error:', error.message);
    }
    
    // Test isValidUUID
    const isValid = db.isValidUUID(invalidId);
    console.log('‚úÖ isValidUUID:', isValid);
    
  } catch (error) {
    console.log('‚ùå Error:', error.message);
  }

  console.log('\nüéâ Test completed!');
}

// Ch·∫°y test
testWebhookFix().catch(console.error); 